attribute:
    attribute type: type
        as_enum for when you want an integer to be treated like an enum
            (or maybe just a general 'as')
    struct/union values
    somehow handle data at an offset to a pointer ex. stb_ds
    members of complex type can specify an attribute as a value: I(default default)
    noserialize (for pointers)
    nodisplay
    ability to apply attributes to types
        ability to remove an attribute
    expression attribute type
        select: attribute describes when a member is valid, ex. unions
        length: change to expression ex. I(length map_width * map_height)

city:
    stb_ds arrays (requires stb_ds attribute)

config:
    figure out where the file goes
    allow config to be overwritten by file in working directory or file given with cmdline argument
    allow config to be appended with another config?
    change c type sizes for different platforms
    static assert in .intro file if types don't match
    windows batch script?

parse:
    !! handle sizeof struct/union in expression
        i don't like any of my options for fixing this...
    handle bit field accessing
    handle strings next to each other
    const flag?
    parse float expressions (for value attributes)
    rudimentary C++ support
        operator overloads
        function overloads
        member functions
        namespaces
        ignore templates

pre:
    save location of includes and defines
    parse #line directives
    create #line directives?

gen:
    option to flag types you care about and only output information nescessary for those types
    option to create typedefs for structs and enums
    typeof with _Generic?

lib:
    accurate type display
    a little dubious and evil: ability to create types at runtime
    IntroVariant?
    sprint/mprint version of everything that uses stdout
    single header?

test:
    test for errors that should be raised by the parser
    more rigerous tests

examples:
    !! more of these

doc:
    parser --help status
    man page

misc:
    use custum allocators more + cleanup
    parse program options and pass only relevant ones to sub-processes
    maybe the preprocessor should output tokens instead of text
