attribute:
    attribute type: type
        as_enum for when you want an integer to be treated like an enum
            (or maybe just a general 'as')
    struct/union values
    somehow handle data at an offset to a pointer ex. stb_ds
    members of complex type can specify an attribute as a value: I(default default)
    noserialize (for pointers)
    nodisplay
    ability to apply attributes to types
    ability to remove an attribute
    expression attribute type
        select: attribute describes when a member is valid, ex. unions
        length: change to expression ex. I(length map_width * map_height)

config:
    change c type sizes for different platforms
    add Makefile target to generate config files
        windows batch script also?
    static assert in .intro file if types don't match

parse:
    !! sizeof struct/union in expression
        i don't like any of my options for fixing this...
    !! fix needing enum name before I(attribute)
        attributes should be allowed anywhere gcc accepts __attribute__
    track type declaration file location?
    functions
    handle bit field accessing
    handle strings next to each other
    const flag?
    parse float expressions
    rudimentary C++ support
        operator overloads
        function overloads
        member functions
        namespaces
        ignore templates

pre:
    save location of includes and defines
    parse #line directives
    create #line directives?
    internal: use context instead of globals

gen:
    option to flag types you care about and only output information nescessary for those types
    option to create typedefs for structs and enums
    typeof with _Generic?

city:
    ability to use id instead of member name
    stbd_ds arrays (requires stb_ds attribute)

lib:
    accurate type display
    a little dubious and evil: ability to create types at runtime
    IntroVariant?
    sprint/mprint version of everything that uses stdout
    single header?

test:
    test for failures that should happen
    should tests and examples be separate things?

doc:
    man page

misc:
    use enum error codes instead of magic numbers
    parse program options and pass only relevant ones to sub-processes
    strange mixture of text parsing and token list parsing is becoming a problem
